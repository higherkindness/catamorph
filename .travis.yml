env:
  - DOCKER_USER=47deg

jobs:
  include:
    - stage: build
      name: build and test
      sudo: false
      language: scala
      jdk:
        - openjdk8
      scala:
        - 2.12.10
      before_cache:
        - find $HOME/.sbt -name "*.lock" -type f -delete
        - find $HOME/.ivy2/cache -name "ivydata-*.properties" -type f -delete
        - >
          mkdir -p $HOME/docker && docker images -a --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}'
          | xargs -n 2 -t sh -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'  
      cache:
        bundler: true
        directories:
          - $HOME/.ivy2/cache
          - $HOME/.coursier/cache
          - $HOME/.sbt
          - $HOME/docker
      before_install:
        - if [ "$TRAVIS_BRANCH" = "master" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then openssl aes-256-cbc
          -K $encrypted_0b1d2d2bb383_key -iv $encrypted_0b1d2d2bb383_iv -in secring.gpg.enc -out secring.gpg -d; fi
        - export PATH=${PATH}:./vendor/bundle
        # Load cached docker images
        - if [[ -d $HOME/docker ]]; then ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi
      install:
        - rvm use 2.6.5 --install --fuzzy
        - gem update --system
        - gem install sass
        - gem install jekyll-watch -v 2.2.1
        - gem install jekyll -v 4
      script:
        - sbt ++$TRAVIS_SCALA_VERSION orgScriptCI
      after_success:
        - sbt ++$TRAVIS_SCALA_VERSION orgAfterCISuccess
    - stage: build
      name: docker build
      sudo: required
      services:
        - docker
      script:
        - export VERSION=$(cut -d'=' -f2  version.sbt | sed -e 's/^[ \t]*//;s/"//g')
        - docker build --build-arg PROJECT=server --build-arg VERSION=$VERSION -t $DOCKER_USER/compendium:$VERSION -t $DOCKER_USER/compendium:latest .
    - stage: publish-docker
      name: docker publish
      sudo: required
      services:
        - docker
      script: skip
      deploy:
        provider: script
        script: bash docker_push.sh $DOCKER_PASSWORD $DOCKER_USER
